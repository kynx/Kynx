<?php
/**
 * Zend Framework
 *
 * LICENSE
 *
 * This source file is subject to the new BSD license that is bundled
 * with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://framework.zend.com/license/new-bsd
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@zend.com so we can send you a copy immediately.
 *
 * @category   Zend
 * @package    Zend_Service
 * @subpackage Rackspace
 * @copyright  Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */

/**
 * @see Zend_Service_Rackspace_Files_Checksum_Interface
 */
require_once 'Zend/Service/Rackspace/Files/Checksum/Interface.php';

/**
 * Performs on-the-fly checksumming by streaming data to system's md5 program
 *
 * @category   Zend
 * @package    Zend_Service
 * @subpackage Rackspace
 * @copyright  Copyright (c) 2005-2012 Zend Technologies USA Inc. (http://www.zend.com)
 * @license    http://framework.zend.com/license/new-bsd     New BSD License
 */
class Zend_Service_Rackspace_Files_Checksum_Proc implements Zend_Service_Rackspace_Files_Checksum_Interface
{
    /**
     * Handle to MD5 process
     * 
     * @var resource
     */
    protected $process;
    
    /**
     * Pipes used to communicate with process
     * @var array
     */
    protected $pipes;
    
    /**
     * Concatenated sums
     * @var string
     */
    protected $sum = '';
    
    /**
     * Options passed to constructor
     * 
     * @var array
     */
    protected $options = array(
        'exe' => 'md5sum', // md5 for FreeBSD/OSX, ??? Windows
    );
    
    /**
     * Sanitized command to open
     * 
     * @var string
     */
    protected $cmd;
    
    /**
     * Error messages generated by process
     * 
     * @var string
     */
    public $error = '';
    
    
    public function __construct($options = array()) {
        $this->options = array_merge($this->options, $options);
        
        $exe = preg_replace('|^/?(\w*).*|', '$1', $this->options['exe']);
        $paths = explode(PATH_SEPARATOR, $_SERVER['PATH']);
        array_unshift($paths, '');
        foreach ($paths as $path) {
            if (is_executable($path . '/' . $exe)) {
                $path = $path . '/'
                      . (strpos('/', $this->options['exe']) === 0
                            ? substr($this->options['exe'], 1) 
                            : $this->options['exe']);
                $this->cmd = escapeshellcmd($path);
                break;
            }
        }
        
        if (!$this->cmd) {
            /**
             * @see Zend_Service_Rackspace_Files_Exception
             */
            require_once 'Zend/Service/Rackspace/Files/Exception.php';
            throw new Zend_Service_Rackspace_Files_Exception("Cannot find md5 executable");
        }
    }
    
    /**
     * Initializes checksum
     * 
     * @throws Zend_Service_Rackspace_Files_Exception
     */
    public function open()
    {
        if ($this->process) {
            /**
             * @see Zend_Service_Rackspace_Files_Exception
             */
            require_once 'Zend/Service/Rackspace/Files/Exception.php';
            throw new Zend_Service_Rackspace_Files_Exception("Process is already open");            
        }
        
        $descriptorspec = array(
           0 => array("pipe", "r"),
           1 => array("pipe", "w"),
           2 => array("pipe", "a")
        );
        
        $this->process = proc_open($this->cmd, $descriptorspec, $this->pipes);
        if (!is_resource($this->process)) {
            /**
             * @see Zend_Service_Rackspace_Files_Exception
             */
            require_once 'Zend/Service/Rackspace/Files/Exception.php';
            throw new Zend_Service_Rackspace_Files_Exception("Couldn't open temp file");
        }
        
        // don't block writes
        stream_set_blocking($this->pipes[0], 0);
    }
    
    /**
     * Appends data to be checksummed
     * 
     * @param string $data
     * @return integer     Length of data appended, false on failure
     */    
    public function append($data)
    {
        $status = proc_get_status($this->process);
        if (empty($status['running'])) {
            $this->close();
            /**
             * @see Zend_Service_Rackspace_Files_Exception
             */
            require_once 'Zend/Service/Rackspace/Files/Exception.php';
            throw new Zend_Service_Rackspace_Files_Exception("Process not running");
        }
        
        $written = 0;
        $len = strlen($data);
        $read = null;
        $write = array($this->pipes[0]);
        $except = null;
        $wlen = true;
        
        // wait for pipe to be ready then be sure all data has been written
        while ($wlen && $written < $len) {
            if (false !== ($num = stream_select($read, $write, $except, 2)) && $num) {
                $wlen = fwrite($this->pipes[0], $data, strlen($data));
                if ($wlen !== false) {
                    $written += $wlen;
                    $data = substr($data, $wlen);
                }
            }
            elseif ($num === false) {
                $wlen = false;
            }
        }
        return $written == $len ? $written : false;
    }
    
    /**
     * Returns checksum
     * 
     * @return string
     */    
    public function getSum()
    {
        $this->calculate();
        return $this->sum;
    }
    
    /**
     * Calculates checksum
     * 
     * @return string  Checksum, false on failure
     */
    public function calculate() 
    {
        $sum = false;
        if ($this->process) {
            fclose($this->pipes[0]);
            unset($this->pipes[0]);
            
            while (!feof($this->pipes[2])) {
                $this->error .= fread($this->pipes[2], 1024);
            }
            $sum = fread($this->pipes[1], 32);
            if (!$err && $sum) {
                $this->sum .= $sum;
            }
            else {
                $sum = false;
            }
        }
        $this->close();
        return $sum;
    }
    
    /**
     * Closes checksum, performing any cleanup
     */
    public function close() 
    {
        if ($this->process) {
            foreach ($this->pipes as $i) {
                @fclose($this->pipes[$i]);
            }
            proc_close($this->process);
            $this->process = null;
        }
    }
    
    public function __destruct()
    {
        $this->close();
    }
}